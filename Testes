void run_tests(int num_tests, int array_sizes[]) {
    for (int i = 0; i < num_tests; i++) {
        int size = array_sizes[i];
        Image* data = malloc(size * sizeof(Image));

        // Teste com dados aleat贸rios
        generate_random_data(data, size);
        test_algorithm(quicksort, data, size, "Quicksort", "Aleat贸rio");
        test_algorithm(heapsort, data, size, "Heapsort", "Aleat贸rio");
        test_algorithm(mergesort, data, size, "Mergesort", "Aleat贸rio");

        // Teste com dados ordenados
        qsort(data, size, sizeof(Image), compare_images);
        test_algorithm(quicksort, data, size, "Quicksort", "Ordenado");
        test_algorithm(heapsort, data, size, "Heapsort", "Ordenado");
        test_algorithm(mergesort, data, size, "Mergesort", "Ordenado");

        // Teste com dados inversamente ordenados
        reverse_array(data, size);
        test_algorithm(quicksort, data, size, "Quicksort", "Inversamente Ordenado");
        test_algorithm(heapsort, data, size, "Heapsort", "Inversamente Ordenado");
        test_algorithm(mergesort, data, size, "Mergesort", "Inversamente Ordenado");

        free(data);
    }
}
